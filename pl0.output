Terminals unused in grammar

    "("
    ")"
    ast


State 0 conflicts: 1 shift/reduce
State 4 conflicts: 1 shift/reduce
State 14 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: block "."

    2 block: constDecls varDecls procDecls stmt

    3 constDecls: constDecl
    4           | constDecls constDecl
    5           | empty

    6 constDecl: "const" constDefs

    7 constDefs: constDef
    8          | constDefs "," constDef

    9 constDef: identsym "=" numbersym

   10 varDecls: varDecl
   11         | varDecls varDecl
   12         | empty

   13 varDecl: "var" idents

   14 idents: identsym
   15       | idents "," identsym

   16 procDecls: procDecl
   17          | procDecls procDecl
   18          | empty

   19 procDecl: "procedure" identsym ";" block ";"

   20 stmt: assignStmt
   21     | callStmt
   22     | beginStmt
   23     | ifStmt
   24     | whileStmt
   25     | readStmt
   26     | writeStmt
   27     | skipStmt

   28 assignStmt: identsym ":=" expr

   29 callStmt: "call" identsym

   30 beginStmt: "begin" stmts "end"

   31 ifStmt: "if" condition "then" stmt "else" stmt

   32 whileStmt: "while" condition "do" stmt

   33 readStmt: "read" identsym

   34 writeStmt: "write" expr

   35 skipStmt: "skip"

   36 stmts: stmt
   37      | stmts ";" stmt

   38 condition: oddCondition
   39          | relOpCondition

   40 oddCondition: "odd" expr

   41 relOpCondition: expr relOp expr

   42 relOp: "="
   43      | "<>"
   44      | "<"
   45      | "<="
   46      | ">"
   47      | ">="

   48 expr: term
   49     | expr "+" term
   50     | expr "-" term

   51 term: factor
   52     | term "*" factor
   53     | term "/" factor

   54 factor: identsym
   55       | "-" numbersym
   56       | posSign numbersym

   57 posSign: "+"

   58 empty: ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 9 14 15 19 28 29 33 54
    numbersym <number> (259) 9 55 56
    "+" <token> (260) 49 57
    "-" <token> (261) 50 55
    "*" <token> (262) 52
    "/" <token> (263) 53
    "." <token> (264) 1
    ";" <token> (265) 19 37
    "=" <token> (266) 9 42
    "," <token> (267) 8 15
    ":=" <token> (268) 28
    "const" <token> (269) 6
    "var" <token> (270) 13
    "procedure" <token> (271) 19
    "call" <token> (272) 29
    "begin" <token> (273) 30
    "end" <token> (274) 30
    "if" <token> (275) 31
    "then" <token> (276) 31
    "else" <token> (277) 31
    "while" <token> (278) 32
    "do" <token> (279) 32
    "read" <token> (280) 33
    "write" <token> (281) 34
    "skip" <token> (282) 35
    "odd" <token> (283) 40
    "<>" <token> (284) 43
    "<" <token> (285) 44
    "<=" <token> (286) 45
    ">" <token> (287) 46
    ">=" <token> (288) 47
    "(" <token> (289)
    ")" <token> (290)
    ast <ast> (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program <block> (38)
        on left: 1
        on right: 0
    block <block> (39)
        on left: 2
        on right: 1 19
    constDecls <const_decls> (40)
        on left: 3 4 5
        on right: 2 4
    constDecl <const_decl> (41)
        on left: 6
        on right: 3 4
    constDefs <const_defs> (42)
        on left: 7 8
        on right: 6 8
    constDef <const_def> (43)
        on left: 9
        on right: 7 8
    varDecls <var_decls> (44)
        on left: 10 11 12
        on right: 2 11
    varDecl <var_decl> (45)
        on left: 13
        on right: 10 11
    idents <idents> (46)
        on left: 14 15
        on right: 13 15
    procDecls <proc_decls> (47)
        on left: 16 17 18
        on right: 2 17
    procDecl <proc_decl> (48)
        on left: 19
        on right: 16 17
    stmt <stmt> (49)
        on left: 20 21 22 23 24 25 26 27
        on right: 2 31 32 36 37
    assignStmt <assign_stmt> (50)
        on left: 28
        on right: 20
    callStmt <call_stmt> (51)
        on left: 29
        on right: 21
    beginStmt <begin_stmt> (52)
        on left: 30
        on right: 22
    ifStmt <if_stmt> (53)
        on left: 31
        on right: 23
    whileStmt <while_stmt> (54)
        on left: 32
        on right: 24
    readStmt <read_stmt> (55)
        on left: 33
        on right: 25
    writeStmt <write_stmt> (56)
        on left: 34
        on right: 26
    skipStmt <skip_stmt> (57)
        on left: 35
        on right: 27
    stmts <stmts> (58)
        on left: 36 37
        on right: 30 37
    condition <condition> (59)
        on left: 38 39
        on right: 31 32
    oddCondition <odd_condition> (60)
        on left: 40
        on right: 38
    relOpCondition <rel_op_condition> (61)
        on left: 41
        on right: 39
    relOp <token> (62)
        on left: 42 43 44 45 46 47
        on right: 41
    expr <expr> (63)
        on left: 48 49 50
        on right: 28 34 40 41 49 50
    term <expr> (64)
        on left: 51 52 53
        on right: 48 49 50 52 53
    factor <expr> (65)
        on left: 54 55 56
        on right: 51 52 53
    posSign <token> (66)
        on left: 57
        on right: 56
    empty <empty> (67)
        on left: 58
        on right: 5 12 18


State 0

    0 $accept: • program $end

    "const"  shift, and go to state 1

    "const"   [reduce using rule 58 (empty)]
    $default  reduce using rule 58 (empty)

    program     go to state 2
    block       go to state 3
    constDecls  go to state 4
    constDecl   go to state 5
    empty       go to state 6


State 1

    6 constDecl: "const" • constDefs

    identsym  shift, and go to state 7

    constDefs  go to state 8
    constDef   go to state 9


State 2

    0 $accept: program • $end

    $end  shift, and go to state 10


State 3

    1 program: block • "."

    "."  shift, and go to state 11


State 4

    2 block: constDecls • varDecls procDecls stmt
    4 constDecls: constDecls • constDecl

    "const"  shift, and go to state 1
    "var"    shift, and go to state 12

    "var"     [reduce using rule 58 (empty)]
    $default  reduce using rule 58 (empty)

    constDecl  go to state 13
    varDecls   go to state 14
    varDecl    go to state 15
    empty      go to state 16


State 5

    3 constDecls: constDecl •

    $default  reduce using rule 3 (constDecls)


State 6

    5 constDecls: empty •

    $default  reduce using rule 5 (constDecls)


State 7

    9 constDef: identsym • "=" numbersym

    "="  shift, and go to state 17


State 8

    6 constDecl: "const" constDefs •
    8 constDefs: constDefs • "," constDef

    ","  shift, and go to state 18

    $default  reduce using rule 6 (constDecl)


State 9

    7 constDefs: constDef •

    $default  reduce using rule 7 (constDefs)


State 10

    0 $accept: program $end •

    $default  accept


State 11

    1 program: block "." •

    $default  reduce using rule 1 (program)


State 12

   13 varDecl: "var" • idents

    identsym  shift, and go to state 19

    idents  go to state 20


State 13

    4 constDecls: constDecls constDecl •

    $default  reduce using rule 4 (constDecls)


State 14

    2 block: constDecls varDecls • procDecls stmt
   11 varDecls: varDecls • varDecl

    "var"        shift, and go to state 12
    "procedure"  shift, and go to state 21

    "procedure"  [reduce using rule 58 (empty)]
    $default     reduce using rule 58 (empty)

    varDecl    go to state 22
    procDecls  go to state 23
    procDecl   go to state 24
    empty      go to state 25


State 15

   10 varDecls: varDecl •

    $default  reduce using rule 10 (varDecls)


State 16

   12 varDecls: empty •

    $default  reduce using rule 12 (varDecls)


State 17

    9 constDef: identsym "=" • numbersym

    numbersym  shift, and go to state 26


State 18

    8 constDefs: constDefs "," • constDef

    identsym  shift, and go to state 7

    constDef  go to state 27


State 19

   14 idents: identsym •

    $default  reduce using rule 14 (idents)


State 20

   13 varDecl: "var" idents •
   15 idents: idents • "," identsym

    ","  shift, and go to state 28

    $default  reduce using rule 13 (varDecl)


State 21

   19 procDecl: "procedure" • identsym ";" block ";"

    identsym  shift, and go to state 29


State 22

   11 varDecls: varDecls varDecl •

    $default  reduce using rule 11 (varDecls)


State 23

    2 block: constDecls varDecls procDecls • stmt
   17 procDecls: procDecls • procDecl

    identsym     shift, and go to state 30
    "procedure"  shift, and go to state 21
    "call"       shift, and go to state 31
    "begin"      shift, and go to state 32
    "if"         shift, and go to state 33
    "while"      shift, and go to state 34
    "read"       shift, and go to state 35
    "write"      shift, and go to state 36
    "skip"       shift, and go to state 37

    procDecl    go to state 38
    stmt        go to state 39
    assignStmt  go to state 40
    callStmt    go to state 41
    beginStmt   go to state 42
    ifStmt      go to state 43
    whileStmt   go to state 44
    readStmt    go to state 45
    writeStmt   go to state 46
    skipStmt    go to state 47


State 24

   16 procDecls: procDecl •

    $default  reduce using rule 16 (procDecls)


State 25

   18 procDecls: empty •

    $default  reduce using rule 18 (procDecls)


State 26

    9 constDef: identsym "=" numbersym •

    $default  reduce using rule 9 (constDef)


State 27

    8 constDefs: constDefs "," constDef •

    $default  reduce using rule 8 (constDefs)


State 28

   15 idents: idents "," • identsym

    identsym  shift, and go to state 48


State 29

   19 procDecl: "procedure" identsym • ";" block ";"

    ";"  shift, and go to state 49


State 30

   28 assignStmt: identsym • ":=" expr

    ":="  shift, and go to state 50


State 31

   29 callStmt: "call" • identsym

    identsym  shift, and go to state 51


State 32

   30 beginStmt: "begin" • stmts "end"

    identsym  shift, and go to state 30
    "call"    shift, and go to state 31
    "begin"   shift, and go to state 32
    "if"      shift, and go to state 33
    "while"   shift, and go to state 34
    "read"    shift, and go to state 35
    "write"   shift, and go to state 36
    "skip"    shift, and go to state 37

    stmt        go to state 52
    assignStmt  go to state 40
    callStmt    go to state 41
    beginStmt   go to state 42
    ifStmt      go to state 43
    whileStmt   go to state 44
    readStmt    go to state 45
    writeStmt   go to state 46
    skipStmt    go to state 47
    stmts       go to state 53


State 33

   31 ifStmt: "if" • condition "then" stmt "else" stmt

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56
    "odd"     shift, and go to state 57

    condition       go to state 58
    oddCondition    go to state 59
    relOpCondition  go to state 60
    expr            go to state 61
    term            go to state 62
    factor          go to state 63
    posSign         go to state 64


State 34

   32 whileStmt: "while" • condition "do" stmt

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56
    "odd"     shift, and go to state 57

    condition       go to state 65
    oddCondition    go to state 59
    relOpCondition  go to state 60
    expr            go to state 61
    term            go to state 62
    factor          go to state 63
    posSign         go to state 64


State 35

   33 readStmt: "read" • identsym

    identsym  shift, and go to state 66


State 36

   34 writeStmt: "write" • expr

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56

    expr     go to state 67
    term     go to state 62
    factor   go to state 63
    posSign  go to state 64


State 37

   35 skipStmt: "skip" •

    $default  reduce using rule 35 (skipStmt)


State 38

   17 procDecls: procDecls procDecl •

    $default  reduce using rule 17 (procDecls)


State 39

    2 block: constDecls varDecls procDecls stmt •

    $default  reduce using rule 2 (block)


State 40

   20 stmt: assignStmt •

    $default  reduce using rule 20 (stmt)


State 41

   21 stmt: callStmt •

    $default  reduce using rule 21 (stmt)


State 42

   22 stmt: beginStmt •

    $default  reduce using rule 22 (stmt)


State 43

   23 stmt: ifStmt •

    $default  reduce using rule 23 (stmt)


State 44

   24 stmt: whileStmt •

    $default  reduce using rule 24 (stmt)


State 45

   25 stmt: readStmt •

    $default  reduce using rule 25 (stmt)


State 46

   26 stmt: writeStmt •

    $default  reduce using rule 26 (stmt)


State 47

   27 stmt: skipStmt •

    $default  reduce using rule 27 (stmt)


State 48

   15 idents: idents "," identsym •

    $default  reduce using rule 15 (idents)


State 49

   19 procDecl: "procedure" identsym ";" • block ";"

    "const"  shift, and go to state 1

    "const"   [reduce using rule 58 (empty)]
    $default  reduce using rule 58 (empty)

    block       go to state 68
    constDecls  go to state 4
    constDecl   go to state 5
    empty       go to state 6


State 50

   28 assignStmt: identsym ":=" • expr

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56

    expr     go to state 69
    term     go to state 62
    factor   go to state 63
    posSign  go to state 64


State 51

   29 callStmt: "call" identsym •

    $default  reduce using rule 29 (callStmt)


State 52

   36 stmts: stmt •

    $default  reduce using rule 36 (stmts)


State 53

   30 beginStmt: "begin" stmts • "end"
   37 stmts: stmts • ";" stmt

    ";"    shift, and go to state 70
    "end"  shift, and go to state 71


State 54

   54 factor: identsym •

    $default  reduce using rule 54 (factor)


State 55

   57 posSign: "+" •

    $default  reduce using rule 57 (posSign)


State 56

   55 factor: "-" • numbersym

    numbersym  shift, and go to state 72


State 57

   40 oddCondition: "odd" • expr

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56

    expr     go to state 73
    term     go to state 62
    factor   go to state 63
    posSign  go to state 64


State 58

   31 ifStmt: "if" condition • "then" stmt "else" stmt

    "then"  shift, and go to state 74


State 59

   38 condition: oddCondition •

    $default  reduce using rule 38 (condition)


State 60

   39 condition: relOpCondition •

    $default  reduce using rule 39 (condition)


State 61

   41 relOpCondition: expr • relOp expr
   49 expr: expr • "+" term
   50     | expr • "-" term

    "+"   shift, and go to state 75
    "-"   shift, and go to state 76
    "="   shift, and go to state 77
    "<>"  shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80
    ">"   shift, and go to state 81
    ">="  shift, and go to state 82

    relOp  go to state 83


State 62

   48 expr: term •
   52 term: term • "*" factor
   53     | term • "/" factor

    "*"  shift, and go to state 84
    "/"  shift, and go to state 85

    $default  reduce using rule 48 (expr)


State 63

   51 term: factor •

    $default  reduce using rule 51 (term)


State 64

   56 factor: posSign • numbersym

    numbersym  shift, and go to state 86


State 65

   32 whileStmt: "while" condition • "do" stmt

    "do"  shift, and go to state 87


State 66

   33 readStmt: "read" identsym •

    $default  reduce using rule 33 (readStmt)


State 67

   34 writeStmt: "write" expr •
   49 expr: expr • "+" term
   50     | expr • "-" term

    "+"  shift, and go to state 75
    "-"  shift, and go to state 76

    $default  reduce using rule 34 (writeStmt)


State 68

   19 procDecl: "procedure" identsym ";" block • ";"

    ";"  shift, and go to state 88


State 69

   28 assignStmt: identsym ":=" expr •
   49 expr: expr • "+" term
   50     | expr • "-" term

    "+"  shift, and go to state 75
    "-"  shift, and go to state 76

    $default  reduce using rule 28 (assignStmt)


State 70

   37 stmts: stmts ";" • stmt

    identsym  shift, and go to state 30
    "call"    shift, and go to state 31
    "begin"   shift, and go to state 32
    "if"      shift, and go to state 33
    "while"   shift, and go to state 34
    "read"    shift, and go to state 35
    "write"   shift, and go to state 36
    "skip"    shift, and go to state 37

    stmt        go to state 89
    assignStmt  go to state 40
    callStmt    go to state 41
    beginStmt   go to state 42
    ifStmt      go to state 43
    whileStmt   go to state 44
    readStmt    go to state 45
    writeStmt   go to state 46
    skipStmt    go to state 47


State 71

   30 beginStmt: "begin" stmts "end" •

    $default  reduce using rule 30 (beginStmt)


State 72

   55 factor: "-" numbersym •

    $default  reduce using rule 55 (factor)


State 73

   40 oddCondition: "odd" expr •
   49 expr: expr • "+" term
   50     | expr • "-" term

    "+"  shift, and go to state 75
    "-"  shift, and go to state 76

    $default  reduce using rule 40 (oddCondition)


State 74

   31 ifStmt: "if" condition "then" • stmt "else" stmt

    identsym  shift, and go to state 30
    "call"    shift, and go to state 31
    "begin"   shift, and go to state 32
    "if"      shift, and go to state 33
    "while"   shift, and go to state 34
    "read"    shift, and go to state 35
    "write"   shift, and go to state 36
    "skip"    shift, and go to state 37

    stmt        go to state 90
    assignStmt  go to state 40
    callStmt    go to state 41
    beginStmt   go to state 42
    ifStmt      go to state 43
    whileStmt   go to state 44
    readStmt    go to state 45
    writeStmt   go to state 46
    skipStmt    go to state 47


State 75

   49 expr: expr "+" • term

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56

    term     go to state 91
    factor   go to state 63
    posSign  go to state 64


State 76

   50 expr: expr "-" • term

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56

    term     go to state 92
    factor   go to state 63
    posSign  go to state 64


State 77

   42 relOp: "=" •

    $default  reduce using rule 42 (relOp)


State 78

   43 relOp: "<>" •

    $default  reduce using rule 43 (relOp)


State 79

   44 relOp: "<" •

    $default  reduce using rule 44 (relOp)


State 80

   45 relOp: "<=" •

    $default  reduce using rule 45 (relOp)


State 81

   46 relOp: ">" •

    $default  reduce using rule 46 (relOp)


State 82

   47 relOp: ">=" •

    $default  reduce using rule 47 (relOp)


State 83

   41 relOpCondition: expr relOp • expr

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56

    expr     go to state 93
    term     go to state 62
    factor   go to state 63
    posSign  go to state 64


State 84

   52 term: term "*" • factor

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56

    factor   go to state 94
    posSign  go to state 64


State 85

   53 term: term "/" • factor

    identsym  shift, and go to state 54
    "+"       shift, and go to state 55
    "-"       shift, and go to state 56

    factor   go to state 95
    posSign  go to state 64


State 86

   56 factor: posSign numbersym •

    $default  reduce using rule 56 (factor)


State 87

   32 whileStmt: "while" condition "do" • stmt

    identsym  shift, and go to state 30
    "call"    shift, and go to state 31
    "begin"   shift, and go to state 32
    "if"      shift, and go to state 33
    "while"   shift, and go to state 34
    "read"    shift, and go to state 35
    "write"   shift, and go to state 36
    "skip"    shift, and go to state 37

    stmt        go to state 96
    assignStmt  go to state 40
    callStmt    go to state 41
    beginStmt   go to state 42
    ifStmt      go to state 43
    whileStmt   go to state 44
    readStmt    go to state 45
    writeStmt   go to state 46
    skipStmt    go to state 47


State 88

   19 procDecl: "procedure" identsym ";" block ";" •

    $default  reduce using rule 19 (procDecl)


State 89

   37 stmts: stmts ";" stmt •

    $default  reduce using rule 37 (stmts)


State 90

   31 ifStmt: "if" condition "then" stmt • "else" stmt

    "else"  shift, and go to state 97


State 91

   49 expr: expr "+" term •
   52 term: term • "*" factor
   53     | term • "/" factor

    "*"  shift, and go to state 84
    "/"  shift, and go to state 85

    $default  reduce using rule 49 (expr)


State 92

   50 expr: expr "-" term •
   52 term: term • "*" factor
   53     | term • "/" factor

    "*"  shift, and go to state 84
    "/"  shift, and go to state 85

    $default  reduce using rule 50 (expr)


State 93

   41 relOpCondition: expr relOp expr •
   49 expr: expr • "+" term
   50     | expr • "-" term

    "+"  shift, and go to state 75
    "-"  shift, and go to state 76

    $default  reduce using rule 41 (relOpCondition)


State 94

   52 term: term "*" factor •

    $default  reduce using rule 52 (term)


State 95

   53 term: term "/" factor •

    $default  reduce using rule 53 (term)


State 96

   32 whileStmt: "while" condition "do" stmt •

    $default  reduce using rule 32 (whileStmt)


State 97

   31 ifStmt: "if" condition "then" stmt "else" • stmt

    identsym  shift, and go to state 30
    "call"    shift, and go to state 31
    "begin"   shift, and go to state 32
    "if"      shift, and go to state 33
    "while"   shift, and go to state 34
    "read"    shift, and go to state 35
    "write"   shift, and go to state 36
    "skip"    shift, and go to state 37

    stmt        go to state 98
    assignStmt  go to state 40
    callStmt    go to state 41
    beginStmt   go to state 42
    ifStmt      go to state 43
    whileStmt   go to state 44
    readStmt    go to state 45
    writeStmt   go to state 46
    skipStmt    go to state 47


State 98

   31 ifStmt: "if" condition "then" stmt "else" stmt •

    $default  reduce using rule 31 (ifStmt)
